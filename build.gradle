buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.edu.sc.seis:macAppBundle:2.1.5"
  }
}

plugins {
  id 'net.researchgate.release' version '2.3.4'
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'

sourceCompatibility = 1.8

mainClassName = "io.github.flpa.gradlereleasetest.Main"

applicationDefaultJvmArgs = ["-Xmx2g"]

repositories {
    mavenCentral()
}

dependencies {
	compile 'commons-io:commons-io:2.4'
	testCompile group: 'junit', name: 'junit', version: '4.+'
}

//for creating DMG file
apply plugin: "edu.sc.seis.macAppBundle"


macAppBundle {
    mainClassName = "at.fhtw.mcs.Main"
}

// include license and README in distribution package
distZip {
    into(project.name + "-" + version) {
        from '.'
        include 'LICENSE.txt'
    }

    // README.md is renamed to README.txt and Images are filtered
    into(project.name + "-" + version) {
    	from '.'
    	include 'README.md'

    	filter { String line ->
	    line.replaceAll('!?\\[.*\\]\\(.*\\)', '')
    	}

    	rename { String fileName ->
    	    fileName.replace('.md', '.txt')
    	}
    }
}


//task doit(dependsOn: 'release') << {
createReleaseTag << {
    println version
}
preTagCommit << {
    println version
}

     task runo(type:Exec) {
       //on linux
       commandLine 'curl', '-u', 'flpa', '-X', 'POST', '-d', '@release.json', 'https://api.github.com/repos/flpa/gradle-release-tests/releases'

       //store the output instead of printing to the console:
       standardOutput = new ByteArrayOutputStream()

       //extension method stopTomcat.output() can be used to obtain the output:
       ext.output = {
         return standardOutput.toString()
       }
	
	println standardOutput.toString()
     }
     
release {
    preCommitText = '[Gradle]'
    preTagCommitMessage = 'pre tag commit:'
    tagCommitMessage = 'creating tag:'
    newVersionCommitMessage = 'new version commit:'
}


